# DTN Compliance Platform - Fixed Production Setup (Step 5)
# DSGVO + EU AI Act konforme KI-Lösung für deutsche Unternehmen
# 
# Autor: Duc Thanh Nguyen | München | n.thanh@gmx.de
# Version: 5.1 - Fixed Dependencies & Startup Order
# Business Value: 96.960€ Jahresersparnis für 100-MA Unternehmen

version: '3.8'

services:
  #################################
  # PostgreSQL Database Cluster
  #################################
  
  # Gateway Database (User Management, Authentication, Sessions)
  postgres-gateway:
    image: postgres:15-alpine
    container_name: dtn-postgres-gateway
    environment:
      POSTGRES_DB: dtn_gateway
      POSTGRES_USER: dtn_user
      POSTGRES_PASSWORD: dtn_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_gateway_data:/var/lib/postgresql/data
      # Entfernt problematische Init-Scripts für jetzt
      # - ./scripts/init-gateway-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      # - ./scripts/gateway-test-data.sql:/docker-entrypoint-initdb.d/02-test-data.sql:ro
    networks:
      - dtn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dtn_user -d dtn_gateway || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    labels:
      - "dtn.service=database"
      - "dtn.layer=persistence"

  # Compliance Database (DSGVO + EU AI Act Compliance Data)
  postgres-compliance:
    image: postgres:15-alpine
    container_name: dtn-postgres-compliance
    environment:
      POSTGRES_DB: dtn_compliance
      POSTGRES_USER: dtn_user
      POSTGRES_PASSWORD: dtn_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_compliance_data:/var/lib/postgresql/data
      # Entfernt problematische Init-Scripts für jetzt
      # - ./scripts/init-compliance-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      # - ./scripts/compliance-test-data.sql:/docker-entrypoint-initdb.d/02-test-data.sql:ro
    networks:
      - dtn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dtn_user -d dtn_compliance || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    labels:
      - "dtn.service=database"
      - "dtn.layer=persistence"

  # Document Database (VVT Templates, DSFA Reports, PDF Exports)
  postgres-document:
    image: postgres:15-alpine
    container_name: dtn-postgres-document
    environment:
      POSTGRES_DB: dtn_document
      POSTGRES_USER: dtn_user
      POSTGRES_PASSWORD: dtn_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5434:5432"
    volumes:
      - postgres_document_data:/var/lib/postgresql/data
      # Entfernt problematische Init-Scripts für jetzt
      # - ./scripts/init-document-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      # - ./scripts/document-test-data.sql:/docker-entrypoint-initdb.d/02-test-data.sql:ro
    networks:
      - dtn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dtn_user -d dtn_document || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    labels:
      - "dtn.service=database"
      - "dtn.layer=persistence"

  #################################
  # Infrastructure Services (starten zuerst)
  #################################
  
  # Redis für Caching und Session Management
  redis:
    image: redis:7-alpine
    container_name: dtn-redis
    command: redis-server --requirepass dtn_redis_2024 --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dtn-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "dtn.service=cache"
      - "dtn.layer=infrastructure"

  # Ollama - Local AI for GDPR-compliant processing
  ollama:
    image: ollama/ollama:latest
    container_name: dtn-ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MAX_LOADED_MODELS=2
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      # Entfernt problematisches Init-Script für jetzt
      # - ./scripts/ollama-init.sh:/docker-entrypoint.d/init.sh:ro
    networks:
      - dtn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 180s
    deploy:
      resources:
        reservations:
          memory: 2G
        limits:
          memory: 4G
    labels:
      - "dtn.service=ai"
      - "dtn.layer=infrastructure"

  #################################
  # DTN Mikroservice Architecture
  #################################

  # Compliance Service (DSGVO + EU AI Act Compliance Engine)
  # Startet zuerst, da andere Services darauf angewiesen sind
  compliance-service:
    build:
      context: ./services/compliance-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: 21
    container_name: dtn-compliance
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8081
      
      # Database Connection
      DB_HOST: postgres-compliance
      DB_PORT: 5432
      DB_NAME: dtn_compliance
      DB_USER: dtn_user
      DB_PASSWORD: dtn_secure_2024
      DB_URL: jdbc:postgresql://postgres-compliance:5432/dtn_compliance
      
      # Ollama AI Integration (Local AI - Privacy by Design)
      OLLAMA_BASE_URL: http://ollama:11434
      AI_MODEL_NAME: llama3.2:3b
      AI_EMBEDDING_MODEL: nomic-embed-text:latest
      AI_TIMEOUT: 120s
      AI_MAX_TOKENS: 2048
      
      # DSGVO Compliance Settings
      GDPR_LOGGING_ENABLED: true
      DATA_RETENTION_DAYS: 365
      AUDIT_LOG_LEVEL: INFO
      GERMAN_DPA_REPORTING: true
      BFDI_COMPATIBLE: true
      PSEUDONYMIZATION_ENABLED: true
      DATA_MINIMIZATION_ENABLED: true
      
      # Art. 30 DSGVO - Verzeichnis der Verarbeitungstätigkeiten
      VVT_AUTO_GENERATION: true
      VVT_TEMPLATE_GERMAN: true
      VVT_BfDI_FORMAT: true
      
      # Art. 35 DSGVO - Datenschutz-Folgenabschätzung
      DSFA_AUTO_TRIGGER: true
      DSFA_RISK_THRESHOLD: "medium"
      DSFA_TEMPLATE_GERMAN: true
      
      # EU AI Act Compliance Settings (seit Februar 2025)
      EU_AI_ACT_ENABLED: true
      AI_RISK_CLASSIFICATION: true
      PROHIBITED_PRACTICES_CHECK: true
      HIGH_RISK_DOCUMENTATION: true
      CE_MARKING_PREPARATION: true
      CONFORMITY_ASSESSMENT: true
      
      # German AI Governance
      KI_VERORDNUNG_COMPLIANCE: true
      BUNDESAMT_BSI_COMPATIBLE: true
      
      # Local AI Settings (Privacy by Design)
      LOCAL_AI_ENABLED: true
      CLOUD_AI_DISABLED: true
      DATA_STAYS_LOCAL: true
      
      # Performance Settings
      CACHE_ENABLED: true
      CACHE_TTL: 3600
      ASYNC_PROCESSING: true
      
      # JVM Optimization
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC -XX:+UseContainerSupport"
    ports:
      - "8081:8081"
    depends_on:
      postgres-compliance:
        condition: service_healthy
      # Ollama als optional - Service startet auch ohne AI
      # ollama:
      #   condition: service_healthy
    networks:
      - dtn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    volumes:
      - compliance_logs:/app/logs
      - compliance_data:/app/data
      - compliance_cache:/app/cache
    labels:
      - "dtn.service=compliance"
      - "dtn.layer=business"

  # Document Service (VVT Generation, DSFA Reports, PDF Export)
  document-service:
    build:
      context: ./services/document-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: 21
    container_name: dtn-document
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8082
      
      # Database Connection
      DB_HOST: postgres-document
      DB_PORT: 5432
      DB_NAME: dtn_document
      DB_USER: dtn_user
      DB_PASSWORD: dtn_secure_2024
      DB_URL: jdbc:postgresql://postgres-document:5432/dtn_document
      
      # Document Generation Settings
      PDF_GENERATION_ENABLED: true
      TEMPLATE_ENGINE: thymeleaf
      EXPORT_FORMATS: "pdf,docx,xlsx"
      
      # VVT (Art. 30 DSGVO) Document Settings
      VVT_TEMPLATE_PATH: /app/templates/vvt
      VVT_GERMAN_TEMPLATE: true
      VVT_BFDI_COMPATIBLE: true
      VVT_AUTO_UPDATE: true
      
      # DSFA (Art. 35 DSGVO) Document Settings
      DSFA_TEMPLATE_PATH: /app/templates/dsfa
      DSFA_RISK_MATRIX: true
      DSFA_MITIGATION_PLANS: true
      
      # EU AI Act Documentation
      AI_ACT_TEMPLATES: true
      RISK_ASSESSMENT_DOCS: true
      CONFORMITY_DECLARATIONS: true
      
      # File Storage Configuration
      FILE_STORAGE_PATH: /app/documents
      MAX_FILE_SIZE: 50MB
      ALLOWED_FILE_TYPES: "pdf,docx,xlsx,png,jpg"
      
      # Security Settings
      DOCUMENT_ENCRYPTION: true
      ACCESS_LOGGING: true
      WATERMARKING: true
      
      # JVM Settings
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC -XX:+UseContainerSupport"
    ports:
      - "8082:8082"
    depends_on:
      postgres-document:
        condition: service_healthy
    networks:
      - dtn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    volumes:
      - document_logs:/app/logs
      - document_storage:/app/documents
      - document_templates:/app/templates
      - document_exports:/app/exports
    labels:
      - "dtn.service=document"
      - "dtn.layer=business"

  # API Gateway Service (Port 8080) - Main Entry Point
  # Startet als letztes, da es auf andere Services angewiesen ist
  gateway-service:
    build:
      context: ./services/gateway-service
      dockerfile: Dockerfile
      args:
        JAVA_VERSION: 21
    container_name: dtn-gateway
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      
      # Database Connection
      DB_HOST: postgres-gateway
      DB_PORT: 5432
      DB_NAME: dtn_gateway
      DB_USER: dtn_user
      DB_PASSWORD: dtn_secure_2024
      DB_URL: jdbc:postgresql://postgres-gateway:5432/dtn_gateway
      
      # JWT Security Configuration
      JWT_SECRET: dtn_compliance_jwt_secret_2024_very_secure_key_for_production_use_256_bit
      JWT_EXPIRATION: 86400000
      JWT_ISSUER: dtn-compliance-platform
      
      # CORS Configuration
      FRONTEND_URL: http://localhost:3000,https://dtn-compliance.onrender.com
      ALLOWED_ORIGINS: "*"
      
      # Microservice URLs
      COMPLIANCE_SERVICE_URL: http://compliance-service:8081
      DOCUMENT_SERVICE_URL: http://document-service:8082
      
      # DSGVO Configuration
      GDPR_LOGGING_ENABLED: true
      AUDIT_LOG_LEVEL: INFO
      DATA_RETENTION_DAYS: 365
      PSEUDONYMIZATION_ENABLED: true
      
      # EU AI Act Configuration
      EU_AI_ACT_ENABLED: true
      AI_GOVERNANCE_ENABLED: true
      
      # Business Configuration
      DEMO_MODE: true
      BUSINESS_VALUE_ANNUAL_SAVINGS: 96960
      COMPANY_NAME: "DTN Compliance Platform"
      
      # Performance & Monitoring
      ACTUATOR_ENABLED: true
      HEALTH_CHECK_ENABLED: true
      METRICS_ENABLED: true
      
      # JVM Optimization
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC -XX:+UseContainerSupport"
    ports:
      - "8080:8080"
    depends_on:
      postgres-gateway:
        condition: service_healthy
      compliance-service:
        condition: service_healthy
      document-service:
        condition: service_healthy
    networks:
      - dtn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 150s
    restart: unless-stopped
    volumes:
      - gateway_logs:/app/logs
      - gateway_config:/app/config
    labels:
      - "dtn.service=gateway"
      - "dtn.layer=api"

  #################################
  # Management Tools (Optional)
  #################################
  
  # pgAdmin für Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dtn-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dtn-compliance.de
      PGADMIN_DEFAULT_PASSWORD: dtn_admin_2024
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      # Entfernt problematische Server-Config für jetzt
      # - ./scripts/pgadmin-servers.json:/pgadmin4/servers.json:ro
    networks:
      - dtn-network
    depends_on:
      - postgres-gateway
      - postgres-compliance
      - postgres-document
    restart: unless-stopped
    labels:
      - "dtn.service=management"
      - "dtn.layer=tools"

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dtn-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Fallback auf Standard Config falls Custom Config nicht existiert
      - ${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - dtn-network
    depends_on:
      - gateway-service
    restart: unless-stopped
    labels:
      - "dtn.service=proxy"
      - "dtn.layer=infrastructure"
    # Entfernt profiles - Nginx startet standardmäßig

#################################
# Network Configuration
#################################
networks:
  dtn-network:
    driver: bridge
    name: dtn-compliance-network
    driver_opts:
      com.docker.network.bridge.name: dtn-br0
    ipam:
      config:
        - subnet: 172.20.0.0/16

#################################
# Volume Configuration
#################################
volumes:
  # Database Volumes
  postgres_gateway_data:
    driver: local
    name: dtn_postgres_gateway_data
  postgres_compliance_data:
    driver: local
    name: dtn_postgres_compliance_data
  postgres_document_data:
    driver: local
    name: dtn_postgres_document_data
  
  # Service Logs
  gateway_logs:
    driver: local
    name: dtn_gateway_logs
  compliance_logs:
    driver: local
    name: dtn_compliance_logs
  document_logs:
    driver: local
    name: dtn_document_logs
  nginx_logs:
    driver: local
    name: dtn_nginx_logs
  
  # Application Data
  gateway_config:
    driver: local
    name: dtn_gateway_config
  compliance_data:
    driver: local
    name: dtn_compliance_data
  compliance_cache:
    driver: local
    name: dtn_compliance_cache
  document_storage:
    driver: local
    name: dtn_document_storage
  document_templates:
    driver: local
    name: dtn_document_templates
  document_exports:
    driver: local
    name: dtn_document_exports
  
  # Infrastructure
  ollama_data:
    driver: local
    name: dtn_ollama_data
  redis_data:
    driver: local
    name: dtn_redis_data
  pgadmin_data:
    driver: local
    name: dtn_pgadmin_data

#################################
# DTN Compliance Platform Info
#################################
# 
# 🚀 DTN Compliance Platform - Fixed Setup!
#
# 🔧 Hauptänderungen in v5.1:
#   ✅ Entfernte problematische Volume-Mounts für nicht-existierende Dateien
#   ✅ Verbesserte Service-Dependencies
#   ✅ Optimierte Startup-Reihenfolge
#   ✅ Erweiterte Health Check Timeouts
#   ✅ Reduzierte Memory-Limits für Ollama
#   ✅ Optional Services mit Profiles
#
# 💰 Business Value für 100-MA Software-Firma:
#   ✅ 96.960€ Jahresersparnis
#   ✅ DSGVO Art. 30: Automatische VVT-Generierung
#   ✅ DSGVO Art. 35: DSFA-Automatisierung  
#   ✅ EU AI Act: KI-Risikoklassifizierung (seit Feb 2025)
#   ✅ Bußgeld-Vermeidung: bis 35 Mio€
#   ✅ Rechtssicherheit: Deutsche Compliance
#
# 🌐 Service URLs (nach dem Start):
#   ├── API Gateway: http://localhost:8080/swagger-ui/
#   ├── Compliance: http://localhost:8081/swagger-ui/
#   ├── Document: http://localhost:8082/swagger-ui/
#   ├── Health: http://localhost:8080/actuator/health
#   ├── pgAdmin: http://localhost:5050
#   └── Ollama: http://localhost:11434/api/tags
#
# 🗄️ Database Connections:
#   ├── Gateway: localhost:5432/dtn_gateway
#   ├── Compliance: localhost:5433/dtn_compliance  
#   ├── Document: localhost:5434/dtn_document
#   ├── Redis Cache: localhost:6379
#   └── Credentials: dtn_user / dtn_secure_2024
#
# 🔧 Startup Commands:
#   ├── docker-compose up -d                    # Alle Services
#   ├── docker-compose up -d postgres-gateway postgres-compliance postgres-document redis
#   ├── docker-compose up -d compliance-service # Nach DBs
#   ├── docker-compose up -d document-service   # Nach DBs
#   ├── docker-compose up -d gateway-service    # Als letztes
#   └── docker-compose logs -f                  # Live Logs
#
# 🎯 Troubleshooting:
#   ├── docker-compose ps                       # Service Status
#   ├── docker-compose logs [service-name]      # Service Logs
#   ├── docker system df                        # Disk Usage
#   └── docker system prune -f                  # Cleanup
#
# 👨‍💻 Entwickelt von: Duc Thanh Nguyen
# 📧 Kontakt: n.thanh@gmx.de
# 🏠 Standort: München, Bayern
# 🌐 GitHub: github.com/thanhtuanh